Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> commandLoop
Rule 2     commandLoop -> command commandLoop
Rule 3     commandLoop -> empty
Rule 4     block -> OPENBRACK command CLOSEBRACK
Rule 5     block -> OPENBRACK CLOSEBRACK
Rule 6     command -> function SEMICOL
Rule 7     command -> RETURN relexpr SEMICOL
Rule 8     command -> print SEMICOL
Rule 9     command -> assignment SEMICOL
Rule 10    command -> empty SEMICOL
Rule 11    command -> block
Rule 12    command -> while
Rule 13    command -> if
Rule 14    command -> INT FUNCTION function block
Rule 15    command -> STRING FUNCTION function block
Rule 16    command -> BOOL FUNCTION function block
Rule 17    command -> VOID FUNCTION function block
Rule 18    function -> ID OPENPAR INT ID CLOSEPAR
Rule 19    function -> ID OPENPAR INT ID moreArg CLOSEPAR
Rule 20    function -> ID OPENPAR STRING ID CLOSEPAR
Rule 21    function -> ID OPENPAR STRING ID moreArg CLOSEPAR
Rule 22    function -> ID OPENPAR BOOL ID CLOSEPAR
Rule 23    function -> ID OPENPAR BOOL ID moreArg CLOSEPAR
Rule 24    function -> ID OPENPAR relexpr CLOSEPAR
Rule 25    function -> ID OPENPAR relexpr moreArg CLOSEPAR
Rule 26    function -> ID OPENPAR CLOSEPAR
Rule 27    moreArg -> COMMA relexpr
Rule 28    moreArg -> COMMA relexpr moreArg
Rule 29    moreArg -> COMMA INT ID
Rule 30    moreArg -> COMMA INT ID moreArg
Rule 31    moreArg -> COMMA STRING ID
Rule 32    moreArg -> COMMA STRING ID moreArg
Rule 33    moreArg -> COMMA BOOL ID
Rule 34    moreArg -> COMMA BOOL ID moreArg
Rule 35    assignment -> ID EQUALS expression
Rule 36    assignment -> INT ID EQUALS expression
Rule 37    assignment -> STRING ID EQUALS expression
Rule 38    while -> LOOP WHILE OPENPAR relexpr CLOSEPAR block
Rule 39    if -> IF OPENPAR relexpr CLOSEPAR block
Rule 40    if -> IF OPENPAR relexpr CLOSEPAR block ELSE block
Rule 41    print -> PRINT OPENPAR expression CLOSEPAR
Rule 42    expression -> term
Rule 43    expression -> term OR term
Rule 44    expression -> term PLUS term
Rule 45    expression -> term MINUS term
Rule 46    relexpr -> expression
Rule 47    relexpr -> expression COMPEQUALS expression
Rule 48    relexpr -> expression LESSTHAN expression
Rule 49    relexpr -> expression GREATERTHAN expression
Rule 50    relexpr -> expression GREATERTHANOREQUALS expression
Rule 51    relexpr -> expression LESSTHANOREQUALS expression
Rule 52    relexpr -> expression NOTEQUALS expression
Rule 53    term -> factor
Rule 54    term -> factor MULTIPLY factor
Rule 55    term -> factor DIVIDE factor
Rule 56    term -> factor AND factor
Rule 57    factor -> PLUS factor
Rule 58    factor -> MINUS factor
Rule 59    factor -> NOT factor
Rule 60    factor -> NUMBER
Rule 61    factor -> TRUE
Rule 62    factor -> FALSE
Rule 63    factor -> OPENPAR relexpr CLOSEPAR
Rule 64    factor -> ID
Rule 65    factor -> NORMSTRING
Rule 66    factor -> function
Rule 67    empty -> <empty>

Terminals, with rules where they appear

AND                  : 56
BOOL                 : 16 22 23 33 34
CLOSEBRACK           : 4 5
CLOSEPAR             : 18 19 20 21 22 23 24 25 26 38 39 40 41 63
COMMA                : 27 28 29 30 31 32 33 34
COMPEQUALS           : 47
DIVIDE               : 55
ELSE                 : 40
EQUALS               : 35 36 37
FALSE                : 62
FUNCTION             : 14 15 16 17
GREATERTHAN          : 49
GREATERTHANOREQUALS  : 50
ID                   : 18 18 19 19 20 20 21 21 22 22 23 23 24 25 26 29 30 31 32 33 34 35 36 37 64
IF                   : 39 40
INT                  : 14 18 19 29 30 36
LESSTHAN             : 48
LESSTHANOREQUALS     : 51
LOOP                 : 38
MINUS                : 45 58
MULTIPLY             : 54
NORMSTRING           : 65
NOT                  : 59
NOTEQUALS            : 52
NUMBER               : 60
OPENBRACK            : 4 5
OPENPAR              : 18 19 20 21 22 23 24 25 26 38 39 40 41 63
OR                   : 43
PLUS                 : 44 57
PRINT                : 41
RETURN               : 7
SEMICOL              : 6 7 8 9 10
STRING               : 15 20 21 31 32 37
TRUE                 : 61
VOID                 : 17
WHILE                : 38
error                : 

Nonterminals, with rules where they appear

assignment           : 9
block                : 11 14 15 16 17 38 39 40 40
command              : 2 4
commandLoop          : 1 2
empty                : 3 10
expression           : 35 36 37 41 46 47 47 48 48 49 49 50 50 51 51 52 52
factor               : 53 54 54 55 55 56 56 57 58 59
function             : 6 14 15 16 17 66
if                   : 13
moreArg              : 19 21 23 25 28 30 32 34
print                : 8
program              : 0
relexpr              : 7 24 25 27 28 38 39 40 63
term                 : 42 43 43 44 44 45 45
while                : 12

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . commandLoop
    (2) commandLoop -> . command commandLoop
    (3) commandLoop -> . empty
    (6) command -> . function SEMICOL
    (7) command -> . RETURN relexpr SEMICOL
    (8) command -> . print SEMICOL
    (9) command -> . assignment SEMICOL
    (10) command -> . empty SEMICOL
    (11) command -> . block
    (12) command -> . while
    (13) command -> . if
    (14) command -> . INT FUNCTION function block
    (15) command -> . STRING FUNCTION function block
    (16) command -> . BOOL FUNCTION function block
    (17) command -> . VOID FUNCTION function block
    (67) empty -> .
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR
    (41) print -> . PRINT OPENPAR expression CLOSEPAR
    (35) assignment -> . ID EQUALS expression
    (36) assignment -> . INT ID EQUALS expression
    (37) assignment -> . STRING ID EQUALS expression
    (4) block -> . OPENBRACK command CLOSEBRACK
    (5) block -> . OPENBRACK CLOSEBRACK
    (38) while -> . LOOP WHILE OPENPAR relexpr CLOSEPAR block
    (39) if -> . IF OPENPAR relexpr CLOSEPAR block
    (40) if -> . IF OPENPAR relexpr CLOSEPAR block ELSE block

    RETURN          shift and go to state 6
    INT             shift and go to state 12
    STRING          shift and go to state 13
    BOOL            shift and go to state 14
    VOID            shift and go to state 15
    SEMICOL         reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    ID              shift and go to state 16
    PRINT           shift and go to state 17
    OPENBRACK       shift and go to state 18
    LOOP            shift and go to state 19
    IF              shift and go to state 20

    program                        shift and go to state 1
    commandLoop                    shift and go to state 2
    command                        shift and go to state 3
    empty                          shift and go to state 4
    function                       shift and go to state 5
    print                          shift and go to state 7
    assignment                     shift and go to state 8
    block                          shift and go to state 9
    while                          shift and go to state 10
    if                             shift and go to state 11

state 1

    (0) S' -> program .



state 2

    (1) program -> commandLoop .

    $end            reduce using rule 1 (program -> commandLoop .)


state 3

    (2) commandLoop -> command . commandLoop
    (2) commandLoop -> . command commandLoop
    (3) commandLoop -> . empty
    (6) command -> . function SEMICOL
    (7) command -> . RETURN relexpr SEMICOL
    (8) command -> . print SEMICOL
    (9) command -> . assignment SEMICOL
    (10) command -> . empty SEMICOL
    (11) command -> . block
    (12) command -> . while
    (13) command -> . if
    (14) command -> . INT FUNCTION function block
    (15) command -> . STRING FUNCTION function block
    (16) command -> . BOOL FUNCTION function block
    (17) command -> . VOID FUNCTION function block
    (67) empty -> .
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR
    (41) print -> . PRINT OPENPAR expression CLOSEPAR
    (35) assignment -> . ID EQUALS expression
    (36) assignment -> . INT ID EQUALS expression
    (37) assignment -> . STRING ID EQUALS expression
    (4) block -> . OPENBRACK command CLOSEBRACK
    (5) block -> . OPENBRACK CLOSEBRACK
    (38) while -> . LOOP WHILE OPENPAR relexpr CLOSEPAR block
    (39) if -> . IF OPENPAR relexpr CLOSEPAR block
    (40) if -> . IF OPENPAR relexpr CLOSEPAR block ELSE block

    RETURN          shift and go to state 6
    INT             shift and go to state 12
    STRING          shift and go to state 13
    BOOL            shift and go to state 14
    VOID            shift and go to state 15
    SEMICOL         reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    ID              shift and go to state 16
    PRINT           shift and go to state 17
    OPENBRACK       shift and go to state 18
    LOOP            shift and go to state 19
    IF              shift and go to state 20

    command                        shift and go to state 3
    commandLoop                    shift and go to state 21
    empty                          shift and go to state 4
    function                       shift and go to state 5
    print                          shift and go to state 7
    assignment                     shift and go to state 8
    block                          shift and go to state 9
    while                          shift and go to state 10
    if                             shift and go to state 11

state 4

    (3) commandLoop -> empty .
    (10) command -> empty . SEMICOL

    $end            reduce using rule 3 (commandLoop -> empty .)
    SEMICOL         shift and go to state 22


state 5

    (6) command -> function . SEMICOL

    SEMICOL         shift and go to state 23


state 6

    (7) command -> RETURN . relexpr SEMICOL
    (46) relexpr -> . expression
    (47) relexpr -> . expression COMPEQUALS expression
    (48) relexpr -> . expression LESSTHAN expression
    (49) relexpr -> . expression GREATERTHAN expression
    (50) relexpr -> . expression GREATERTHANOREQUALS expression
    (51) relexpr -> . expression LESSTHANOREQUALS expression
    (52) relexpr -> . expression NOTEQUALS expression
    (42) expression -> . term
    (43) expression -> . term OR term
    (44) expression -> . term PLUS term
    (45) expression -> . term MINUS term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    relexpr                        shift and go to state 24
    expression                     shift and go to state 25
    term                           shift and go to state 26
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 7

    (8) command -> print . SEMICOL

    SEMICOL         shift and go to state 38


state 8

    (9) command -> assignment . SEMICOL

    SEMICOL         shift and go to state 39


state 9

    (11) command -> block .

    RETURN          reduce using rule 11 (command -> block .)
    INT             reduce using rule 11 (command -> block .)
    STRING          reduce using rule 11 (command -> block .)
    BOOL            reduce using rule 11 (command -> block .)
    VOID            reduce using rule 11 (command -> block .)
    ID              reduce using rule 11 (command -> block .)
    PRINT           reduce using rule 11 (command -> block .)
    OPENBRACK       reduce using rule 11 (command -> block .)
    LOOP            reduce using rule 11 (command -> block .)
    IF              reduce using rule 11 (command -> block .)
    SEMICOL         reduce using rule 11 (command -> block .)
    $end            reduce using rule 11 (command -> block .)
    CLOSEBRACK      reduce using rule 11 (command -> block .)


state 10

    (12) command -> while .

    RETURN          reduce using rule 12 (command -> while .)
    INT             reduce using rule 12 (command -> while .)
    STRING          reduce using rule 12 (command -> while .)
    BOOL            reduce using rule 12 (command -> while .)
    VOID            reduce using rule 12 (command -> while .)
    ID              reduce using rule 12 (command -> while .)
    PRINT           reduce using rule 12 (command -> while .)
    OPENBRACK       reduce using rule 12 (command -> while .)
    LOOP            reduce using rule 12 (command -> while .)
    IF              reduce using rule 12 (command -> while .)
    SEMICOL         reduce using rule 12 (command -> while .)
    $end            reduce using rule 12 (command -> while .)
    CLOSEBRACK      reduce using rule 12 (command -> while .)


state 11

    (13) command -> if .

    RETURN          reduce using rule 13 (command -> if .)
    INT             reduce using rule 13 (command -> if .)
    STRING          reduce using rule 13 (command -> if .)
    BOOL            reduce using rule 13 (command -> if .)
    VOID            reduce using rule 13 (command -> if .)
    ID              reduce using rule 13 (command -> if .)
    PRINT           reduce using rule 13 (command -> if .)
    OPENBRACK       reduce using rule 13 (command -> if .)
    LOOP            reduce using rule 13 (command -> if .)
    IF              reduce using rule 13 (command -> if .)
    SEMICOL         reduce using rule 13 (command -> if .)
    $end            reduce using rule 13 (command -> if .)
    CLOSEBRACK      reduce using rule 13 (command -> if .)


state 12

    (14) command -> INT . FUNCTION function block
    (36) assignment -> INT . ID EQUALS expression

    FUNCTION        shift and go to state 40
    ID              shift and go to state 41


state 13

    (15) command -> STRING . FUNCTION function block
    (37) assignment -> STRING . ID EQUALS expression

    FUNCTION        shift and go to state 42
    ID              shift and go to state 43


state 14

    (16) command -> BOOL . FUNCTION function block

    FUNCTION        shift and go to state 44


state 15

    (17) command -> VOID . FUNCTION function block

    FUNCTION        shift and go to state 45


state 16

    (18) function -> ID . OPENPAR INT ID CLOSEPAR
    (19) function -> ID . OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> ID . OPENPAR STRING ID CLOSEPAR
    (21) function -> ID . OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> ID . OPENPAR BOOL ID CLOSEPAR
    (23) function -> ID . OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> ID . OPENPAR relexpr CLOSEPAR
    (25) function -> ID . OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> ID . OPENPAR CLOSEPAR
    (35) assignment -> ID . EQUALS expression

    OPENPAR         shift and go to state 46
    EQUALS          shift and go to state 47


state 17

    (41) print -> PRINT . OPENPAR expression CLOSEPAR

    OPENPAR         shift and go to state 48


state 18

    (4) block -> OPENBRACK . command CLOSEBRACK
    (5) block -> OPENBRACK . CLOSEBRACK
    (6) command -> . function SEMICOL
    (7) command -> . RETURN relexpr SEMICOL
    (8) command -> . print SEMICOL
    (9) command -> . assignment SEMICOL
    (10) command -> . empty SEMICOL
    (11) command -> . block
    (12) command -> . while
    (13) command -> . if
    (14) command -> . INT FUNCTION function block
    (15) command -> . STRING FUNCTION function block
    (16) command -> . BOOL FUNCTION function block
    (17) command -> . VOID FUNCTION function block
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR
    (41) print -> . PRINT OPENPAR expression CLOSEPAR
    (35) assignment -> . ID EQUALS expression
    (36) assignment -> . INT ID EQUALS expression
    (37) assignment -> . STRING ID EQUALS expression
    (67) empty -> .
    (4) block -> . OPENBRACK command CLOSEBRACK
    (5) block -> . OPENBRACK CLOSEBRACK
    (38) while -> . LOOP WHILE OPENPAR relexpr CLOSEPAR block
    (39) if -> . IF OPENPAR relexpr CLOSEPAR block
    (40) if -> . IF OPENPAR relexpr CLOSEPAR block ELSE block

    CLOSEBRACK      shift and go to state 50
    RETURN          shift and go to state 6
    INT             shift and go to state 12
    STRING          shift and go to state 13
    BOOL            shift and go to state 14
    VOID            shift and go to state 15
    ID              shift and go to state 16
    PRINT           shift and go to state 17
    SEMICOL         reduce using rule 67 (empty -> .)
    OPENBRACK       shift and go to state 18
    LOOP            shift and go to state 19
    IF              shift and go to state 20

    command                        shift and go to state 49
    function                       shift and go to state 5
    print                          shift and go to state 7
    assignment                     shift and go to state 8
    empty                          shift and go to state 51
    block                          shift and go to state 9
    while                          shift and go to state 10
    if                             shift and go to state 11

state 19

    (38) while -> LOOP . WHILE OPENPAR relexpr CLOSEPAR block

    WHILE           shift and go to state 52


state 20

    (39) if -> IF . OPENPAR relexpr CLOSEPAR block
    (40) if -> IF . OPENPAR relexpr CLOSEPAR block ELSE block

    OPENPAR         shift and go to state 53


state 21

    (2) commandLoop -> command commandLoop .

    $end            reduce using rule 2 (commandLoop -> command commandLoop .)


state 22

    (10) command -> empty SEMICOL .

    RETURN          reduce using rule 10 (command -> empty SEMICOL .)
    INT             reduce using rule 10 (command -> empty SEMICOL .)
    STRING          reduce using rule 10 (command -> empty SEMICOL .)
    BOOL            reduce using rule 10 (command -> empty SEMICOL .)
    VOID            reduce using rule 10 (command -> empty SEMICOL .)
    ID              reduce using rule 10 (command -> empty SEMICOL .)
    PRINT           reduce using rule 10 (command -> empty SEMICOL .)
    OPENBRACK       reduce using rule 10 (command -> empty SEMICOL .)
    LOOP            reduce using rule 10 (command -> empty SEMICOL .)
    IF              reduce using rule 10 (command -> empty SEMICOL .)
    SEMICOL         reduce using rule 10 (command -> empty SEMICOL .)
    $end            reduce using rule 10 (command -> empty SEMICOL .)
    CLOSEBRACK      reduce using rule 10 (command -> empty SEMICOL .)


state 23

    (6) command -> function SEMICOL .

    RETURN          reduce using rule 6 (command -> function SEMICOL .)
    INT             reduce using rule 6 (command -> function SEMICOL .)
    STRING          reduce using rule 6 (command -> function SEMICOL .)
    BOOL            reduce using rule 6 (command -> function SEMICOL .)
    VOID            reduce using rule 6 (command -> function SEMICOL .)
    ID              reduce using rule 6 (command -> function SEMICOL .)
    PRINT           reduce using rule 6 (command -> function SEMICOL .)
    OPENBRACK       reduce using rule 6 (command -> function SEMICOL .)
    LOOP            reduce using rule 6 (command -> function SEMICOL .)
    IF              reduce using rule 6 (command -> function SEMICOL .)
    SEMICOL         reduce using rule 6 (command -> function SEMICOL .)
    $end            reduce using rule 6 (command -> function SEMICOL .)
    CLOSEBRACK      reduce using rule 6 (command -> function SEMICOL .)


state 24

    (7) command -> RETURN relexpr . SEMICOL

    SEMICOL         shift and go to state 54


state 25

    (46) relexpr -> expression .
    (47) relexpr -> expression . COMPEQUALS expression
    (48) relexpr -> expression . LESSTHAN expression
    (49) relexpr -> expression . GREATERTHAN expression
    (50) relexpr -> expression . GREATERTHANOREQUALS expression
    (51) relexpr -> expression . LESSTHANOREQUALS expression
    (52) relexpr -> expression . NOTEQUALS expression

    SEMICOL         reduce using rule 46 (relexpr -> expression .)
    CLOSEPAR        reduce using rule 46 (relexpr -> expression .)
    COMMA           reduce using rule 46 (relexpr -> expression .)
    COMPEQUALS      shift and go to state 55
    LESSTHAN        shift and go to state 56
    GREATERTHAN     shift and go to state 57
    GREATERTHANOREQUALS shift and go to state 58
    LESSTHANOREQUALS shift and go to state 59
    NOTEQUALS       shift and go to state 60


state 26

    (42) expression -> term .
    (43) expression -> term . OR term
    (44) expression -> term . PLUS term
    (45) expression -> term . MINUS term

    COMPEQUALS      reduce using rule 42 (expression -> term .)
    LESSTHAN        reduce using rule 42 (expression -> term .)
    GREATERTHAN     reduce using rule 42 (expression -> term .)
    GREATERTHANOREQUALS reduce using rule 42 (expression -> term .)
    LESSTHANOREQUALS reduce using rule 42 (expression -> term .)
    NOTEQUALS       reduce using rule 42 (expression -> term .)
    SEMICOL         reduce using rule 42 (expression -> term .)
    CLOSEPAR        reduce using rule 42 (expression -> term .)
    COMMA           reduce using rule 42 (expression -> term .)
    OR              shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 27

    (57) factor -> PLUS . factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    factor                         shift and go to state 64
    function                       shift and go to state 37

state 28

    (58) factor -> MINUS . factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    factor                         shift and go to state 65
    function                       shift and go to state 37

state 29

    (53) term -> factor .
    (54) term -> factor . MULTIPLY factor
    (55) term -> factor . DIVIDE factor
    (56) term -> factor . AND factor

    OR              reduce using rule 53 (term -> factor .)
    PLUS            reduce using rule 53 (term -> factor .)
    MINUS           reduce using rule 53 (term -> factor .)
    COMPEQUALS      reduce using rule 53 (term -> factor .)
    LESSTHAN        reduce using rule 53 (term -> factor .)
    GREATERTHAN     reduce using rule 53 (term -> factor .)
    GREATERTHANOREQUALS reduce using rule 53 (term -> factor .)
    LESSTHANOREQUALS reduce using rule 53 (term -> factor .)
    NOTEQUALS       reduce using rule 53 (term -> factor .)
    SEMICOL         reduce using rule 53 (term -> factor .)
    CLOSEPAR        reduce using rule 53 (term -> factor .)
    COMMA           reduce using rule 53 (term -> factor .)
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    AND             shift and go to state 68


state 30

    (59) factor -> NOT . factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    factor                         shift and go to state 69
    function                       shift and go to state 37

state 31

    (60) factor -> NUMBER .

    MULTIPLY        reduce using rule 60 (factor -> NUMBER .)
    DIVIDE          reduce using rule 60 (factor -> NUMBER .)
    AND             reduce using rule 60 (factor -> NUMBER .)
    OR              reduce using rule 60 (factor -> NUMBER .)
    PLUS            reduce using rule 60 (factor -> NUMBER .)
    MINUS           reduce using rule 60 (factor -> NUMBER .)
    COMPEQUALS      reduce using rule 60 (factor -> NUMBER .)
    LESSTHAN        reduce using rule 60 (factor -> NUMBER .)
    GREATERTHAN     reduce using rule 60 (factor -> NUMBER .)
    GREATERTHANOREQUALS reduce using rule 60 (factor -> NUMBER .)
    LESSTHANOREQUALS reduce using rule 60 (factor -> NUMBER .)
    NOTEQUALS       reduce using rule 60 (factor -> NUMBER .)
    SEMICOL         reduce using rule 60 (factor -> NUMBER .)
    CLOSEPAR        reduce using rule 60 (factor -> NUMBER .)
    COMMA           reduce using rule 60 (factor -> NUMBER .)


state 32

    (61) factor -> TRUE .

    MULTIPLY        reduce using rule 61 (factor -> TRUE .)
    DIVIDE          reduce using rule 61 (factor -> TRUE .)
    AND             reduce using rule 61 (factor -> TRUE .)
    OR              reduce using rule 61 (factor -> TRUE .)
    PLUS            reduce using rule 61 (factor -> TRUE .)
    MINUS           reduce using rule 61 (factor -> TRUE .)
    COMPEQUALS      reduce using rule 61 (factor -> TRUE .)
    LESSTHAN        reduce using rule 61 (factor -> TRUE .)
    GREATERTHAN     reduce using rule 61 (factor -> TRUE .)
    GREATERTHANOREQUALS reduce using rule 61 (factor -> TRUE .)
    LESSTHANOREQUALS reduce using rule 61 (factor -> TRUE .)
    NOTEQUALS       reduce using rule 61 (factor -> TRUE .)
    SEMICOL         reduce using rule 61 (factor -> TRUE .)
    CLOSEPAR        reduce using rule 61 (factor -> TRUE .)
    COMMA           reduce using rule 61 (factor -> TRUE .)


state 33

    (62) factor -> FALSE .

    MULTIPLY        reduce using rule 62 (factor -> FALSE .)
    DIVIDE          reduce using rule 62 (factor -> FALSE .)
    AND             reduce using rule 62 (factor -> FALSE .)
    OR              reduce using rule 62 (factor -> FALSE .)
    PLUS            reduce using rule 62 (factor -> FALSE .)
    MINUS           reduce using rule 62 (factor -> FALSE .)
    COMPEQUALS      reduce using rule 62 (factor -> FALSE .)
    LESSTHAN        reduce using rule 62 (factor -> FALSE .)
    GREATERTHAN     reduce using rule 62 (factor -> FALSE .)
    GREATERTHANOREQUALS reduce using rule 62 (factor -> FALSE .)
    LESSTHANOREQUALS reduce using rule 62 (factor -> FALSE .)
    NOTEQUALS       reduce using rule 62 (factor -> FALSE .)
    SEMICOL         reduce using rule 62 (factor -> FALSE .)
    CLOSEPAR        reduce using rule 62 (factor -> FALSE .)
    COMMA           reduce using rule 62 (factor -> FALSE .)


state 34

    (63) factor -> OPENPAR . relexpr CLOSEPAR
    (46) relexpr -> . expression
    (47) relexpr -> . expression COMPEQUALS expression
    (48) relexpr -> . expression LESSTHAN expression
    (49) relexpr -> . expression GREATERTHAN expression
    (50) relexpr -> . expression GREATERTHANOREQUALS expression
    (51) relexpr -> . expression LESSTHANOREQUALS expression
    (52) relexpr -> . expression NOTEQUALS expression
    (42) expression -> . term
    (43) expression -> . term OR term
    (44) expression -> . term PLUS term
    (45) expression -> . term MINUS term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    relexpr                        shift and go to state 70
    expression                     shift and go to state 25
    term                           shift and go to state 26
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 35

    (64) factor -> ID .
    (18) function -> ID . OPENPAR INT ID CLOSEPAR
    (19) function -> ID . OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> ID . OPENPAR STRING ID CLOSEPAR
    (21) function -> ID . OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> ID . OPENPAR BOOL ID CLOSEPAR
    (23) function -> ID . OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> ID . OPENPAR relexpr CLOSEPAR
    (25) function -> ID . OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> ID . OPENPAR CLOSEPAR

    MULTIPLY        reduce using rule 64 (factor -> ID .)
    DIVIDE          reduce using rule 64 (factor -> ID .)
    AND             reduce using rule 64 (factor -> ID .)
    OR              reduce using rule 64 (factor -> ID .)
    PLUS            reduce using rule 64 (factor -> ID .)
    MINUS           reduce using rule 64 (factor -> ID .)
    COMPEQUALS      reduce using rule 64 (factor -> ID .)
    LESSTHAN        reduce using rule 64 (factor -> ID .)
    GREATERTHAN     reduce using rule 64 (factor -> ID .)
    GREATERTHANOREQUALS reduce using rule 64 (factor -> ID .)
    LESSTHANOREQUALS reduce using rule 64 (factor -> ID .)
    NOTEQUALS       reduce using rule 64 (factor -> ID .)
    SEMICOL         reduce using rule 64 (factor -> ID .)
    CLOSEPAR        reduce using rule 64 (factor -> ID .)
    COMMA           reduce using rule 64 (factor -> ID .)
    OPENPAR         shift and go to state 46


state 36

    (65) factor -> NORMSTRING .

    MULTIPLY        reduce using rule 65 (factor -> NORMSTRING .)
    DIVIDE          reduce using rule 65 (factor -> NORMSTRING .)
    AND             reduce using rule 65 (factor -> NORMSTRING .)
    OR              reduce using rule 65 (factor -> NORMSTRING .)
    PLUS            reduce using rule 65 (factor -> NORMSTRING .)
    MINUS           reduce using rule 65 (factor -> NORMSTRING .)
    COMPEQUALS      reduce using rule 65 (factor -> NORMSTRING .)
    LESSTHAN        reduce using rule 65 (factor -> NORMSTRING .)
    GREATERTHAN     reduce using rule 65 (factor -> NORMSTRING .)
    GREATERTHANOREQUALS reduce using rule 65 (factor -> NORMSTRING .)
    LESSTHANOREQUALS reduce using rule 65 (factor -> NORMSTRING .)
    NOTEQUALS       reduce using rule 65 (factor -> NORMSTRING .)
    SEMICOL         reduce using rule 65 (factor -> NORMSTRING .)
    CLOSEPAR        reduce using rule 65 (factor -> NORMSTRING .)
    COMMA           reduce using rule 65 (factor -> NORMSTRING .)


state 37

    (66) factor -> function .

    MULTIPLY        reduce using rule 66 (factor -> function .)
    DIVIDE          reduce using rule 66 (factor -> function .)
    AND             reduce using rule 66 (factor -> function .)
    OR              reduce using rule 66 (factor -> function .)
    PLUS            reduce using rule 66 (factor -> function .)
    MINUS           reduce using rule 66 (factor -> function .)
    COMPEQUALS      reduce using rule 66 (factor -> function .)
    LESSTHAN        reduce using rule 66 (factor -> function .)
    GREATERTHAN     reduce using rule 66 (factor -> function .)
    GREATERTHANOREQUALS reduce using rule 66 (factor -> function .)
    LESSTHANOREQUALS reduce using rule 66 (factor -> function .)
    NOTEQUALS       reduce using rule 66 (factor -> function .)
    SEMICOL         reduce using rule 66 (factor -> function .)
    CLOSEPAR        reduce using rule 66 (factor -> function .)
    COMMA           reduce using rule 66 (factor -> function .)


state 38

    (8) command -> print SEMICOL .

    RETURN          reduce using rule 8 (command -> print SEMICOL .)
    INT             reduce using rule 8 (command -> print SEMICOL .)
    STRING          reduce using rule 8 (command -> print SEMICOL .)
    BOOL            reduce using rule 8 (command -> print SEMICOL .)
    VOID            reduce using rule 8 (command -> print SEMICOL .)
    ID              reduce using rule 8 (command -> print SEMICOL .)
    PRINT           reduce using rule 8 (command -> print SEMICOL .)
    OPENBRACK       reduce using rule 8 (command -> print SEMICOL .)
    LOOP            reduce using rule 8 (command -> print SEMICOL .)
    IF              reduce using rule 8 (command -> print SEMICOL .)
    SEMICOL         reduce using rule 8 (command -> print SEMICOL .)
    $end            reduce using rule 8 (command -> print SEMICOL .)
    CLOSEBRACK      reduce using rule 8 (command -> print SEMICOL .)


state 39

    (9) command -> assignment SEMICOL .

    RETURN          reduce using rule 9 (command -> assignment SEMICOL .)
    INT             reduce using rule 9 (command -> assignment SEMICOL .)
    STRING          reduce using rule 9 (command -> assignment SEMICOL .)
    BOOL            reduce using rule 9 (command -> assignment SEMICOL .)
    VOID            reduce using rule 9 (command -> assignment SEMICOL .)
    ID              reduce using rule 9 (command -> assignment SEMICOL .)
    PRINT           reduce using rule 9 (command -> assignment SEMICOL .)
    OPENBRACK       reduce using rule 9 (command -> assignment SEMICOL .)
    LOOP            reduce using rule 9 (command -> assignment SEMICOL .)
    IF              reduce using rule 9 (command -> assignment SEMICOL .)
    SEMICOL         reduce using rule 9 (command -> assignment SEMICOL .)
    $end            reduce using rule 9 (command -> assignment SEMICOL .)
    CLOSEBRACK      reduce using rule 9 (command -> assignment SEMICOL .)


state 40

    (14) command -> INT FUNCTION . function block
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    ID              shift and go to state 72

    function                       shift and go to state 71

state 41

    (36) assignment -> INT ID . EQUALS expression

    EQUALS          shift and go to state 73


state 42

    (15) command -> STRING FUNCTION . function block
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    ID              shift and go to state 72

    function                       shift and go to state 74

state 43

    (37) assignment -> STRING ID . EQUALS expression

    EQUALS          shift and go to state 75


state 44

    (16) command -> BOOL FUNCTION . function block
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    ID              shift and go to state 72

    function                       shift and go to state 76

state 45

    (17) command -> VOID FUNCTION . function block
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    ID              shift and go to state 72

    function                       shift and go to state 77

state 46

    (18) function -> ID OPENPAR . INT ID CLOSEPAR
    (19) function -> ID OPENPAR . INT ID moreArg CLOSEPAR
    (20) function -> ID OPENPAR . STRING ID CLOSEPAR
    (21) function -> ID OPENPAR . STRING ID moreArg CLOSEPAR
    (22) function -> ID OPENPAR . BOOL ID CLOSEPAR
    (23) function -> ID OPENPAR . BOOL ID moreArg CLOSEPAR
    (24) function -> ID OPENPAR . relexpr CLOSEPAR
    (25) function -> ID OPENPAR . relexpr moreArg CLOSEPAR
    (26) function -> ID OPENPAR . CLOSEPAR
    (46) relexpr -> . expression
    (47) relexpr -> . expression COMPEQUALS expression
    (48) relexpr -> . expression LESSTHAN expression
    (49) relexpr -> . expression GREATERTHAN expression
    (50) relexpr -> . expression GREATERTHANOREQUALS expression
    (51) relexpr -> . expression LESSTHANOREQUALS expression
    (52) relexpr -> . expression NOTEQUALS expression
    (42) expression -> . term
    (43) expression -> . term OR term
    (44) expression -> . term PLUS term
    (45) expression -> . term MINUS term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    INT             shift and go to state 78
    STRING          shift and go to state 80
    BOOL            shift and go to state 81
    CLOSEPAR        shift and go to state 79
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    relexpr                        shift and go to state 82
    expression                     shift and go to state 25
    term                           shift and go to state 26
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 47

    (35) assignment -> ID EQUALS . expression
    (42) expression -> . term
    (43) expression -> . term OR term
    (44) expression -> . term PLUS term
    (45) expression -> . term MINUS term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    expression                     shift and go to state 83
    term                           shift and go to state 26
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 48

    (41) print -> PRINT OPENPAR . expression CLOSEPAR
    (42) expression -> . term
    (43) expression -> . term OR term
    (44) expression -> . term PLUS term
    (45) expression -> . term MINUS term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    expression                     shift and go to state 84
    term                           shift and go to state 26
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 49

    (4) block -> OPENBRACK command . CLOSEBRACK

    CLOSEBRACK      shift and go to state 85


state 50

    (5) block -> OPENBRACK CLOSEBRACK .

    RETURN          reduce using rule 5 (block -> OPENBRACK CLOSEBRACK .)
    INT             reduce using rule 5 (block -> OPENBRACK CLOSEBRACK .)
    STRING          reduce using rule 5 (block -> OPENBRACK CLOSEBRACK .)
    BOOL            reduce using rule 5 (block -> OPENBRACK CLOSEBRACK .)
    VOID            reduce using rule 5 (block -> OPENBRACK CLOSEBRACK .)
    ID              reduce using rule 5 (block -> OPENBRACK CLOSEBRACK .)
    PRINT           reduce using rule 5 (block -> OPENBRACK CLOSEBRACK .)
    OPENBRACK       reduce using rule 5 (block -> OPENBRACK CLOSEBRACK .)
    LOOP            reduce using rule 5 (block -> OPENBRACK CLOSEBRACK .)
    IF              reduce using rule 5 (block -> OPENBRACK CLOSEBRACK .)
    SEMICOL         reduce using rule 5 (block -> OPENBRACK CLOSEBRACK .)
    $end            reduce using rule 5 (block -> OPENBRACK CLOSEBRACK .)
    CLOSEBRACK      reduce using rule 5 (block -> OPENBRACK CLOSEBRACK .)
    ELSE            reduce using rule 5 (block -> OPENBRACK CLOSEBRACK .)


state 51

    (10) command -> empty . SEMICOL

    SEMICOL         shift and go to state 22


state 52

    (38) while -> LOOP WHILE . OPENPAR relexpr CLOSEPAR block

    OPENPAR         shift and go to state 86


state 53

    (39) if -> IF OPENPAR . relexpr CLOSEPAR block
    (40) if -> IF OPENPAR . relexpr CLOSEPAR block ELSE block
    (46) relexpr -> . expression
    (47) relexpr -> . expression COMPEQUALS expression
    (48) relexpr -> . expression LESSTHAN expression
    (49) relexpr -> . expression GREATERTHAN expression
    (50) relexpr -> . expression GREATERTHANOREQUALS expression
    (51) relexpr -> . expression LESSTHANOREQUALS expression
    (52) relexpr -> . expression NOTEQUALS expression
    (42) expression -> . term
    (43) expression -> . term OR term
    (44) expression -> . term PLUS term
    (45) expression -> . term MINUS term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    relexpr                        shift and go to state 87
    expression                     shift and go to state 25
    term                           shift and go to state 26
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 54

    (7) command -> RETURN relexpr SEMICOL .

    RETURN          reduce using rule 7 (command -> RETURN relexpr SEMICOL .)
    INT             reduce using rule 7 (command -> RETURN relexpr SEMICOL .)
    STRING          reduce using rule 7 (command -> RETURN relexpr SEMICOL .)
    BOOL            reduce using rule 7 (command -> RETURN relexpr SEMICOL .)
    VOID            reduce using rule 7 (command -> RETURN relexpr SEMICOL .)
    ID              reduce using rule 7 (command -> RETURN relexpr SEMICOL .)
    PRINT           reduce using rule 7 (command -> RETURN relexpr SEMICOL .)
    OPENBRACK       reduce using rule 7 (command -> RETURN relexpr SEMICOL .)
    LOOP            reduce using rule 7 (command -> RETURN relexpr SEMICOL .)
    IF              reduce using rule 7 (command -> RETURN relexpr SEMICOL .)
    SEMICOL         reduce using rule 7 (command -> RETURN relexpr SEMICOL .)
    $end            reduce using rule 7 (command -> RETURN relexpr SEMICOL .)
    CLOSEBRACK      reduce using rule 7 (command -> RETURN relexpr SEMICOL .)


state 55

    (47) relexpr -> expression COMPEQUALS . expression
    (42) expression -> . term
    (43) expression -> . term OR term
    (44) expression -> . term PLUS term
    (45) expression -> . term MINUS term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    expression                     shift and go to state 88
    term                           shift and go to state 26
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 56

    (48) relexpr -> expression LESSTHAN . expression
    (42) expression -> . term
    (43) expression -> . term OR term
    (44) expression -> . term PLUS term
    (45) expression -> . term MINUS term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    expression                     shift and go to state 89
    term                           shift and go to state 26
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 57

    (49) relexpr -> expression GREATERTHAN . expression
    (42) expression -> . term
    (43) expression -> . term OR term
    (44) expression -> . term PLUS term
    (45) expression -> . term MINUS term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    expression                     shift and go to state 90
    term                           shift and go to state 26
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 58

    (50) relexpr -> expression GREATERTHANOREQUALS . expression
    (42) expression -> . term
    (43) expression -> . term OR term
    (44) expression -> . term PLUS term
    (45) expression -> . term MINUS term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    expression                     shift and go to state 91
    term                           shift and go to state 26
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 59

    (51) relexpr -> expression LESSTHANOREQUALS . expression
    (42) expression -> . term
    (43) expression -> . term OR term
    (44) expression -> . term PLUS term
    (45) expression -> . term MINUS term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    expression                     shift and go to state 92
    term                           shift and go to state 26
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 60

    (52) relexpr -> expression NOTEQUALS . expression
    (42) expression -> . term
    (43) expression -> . term OR term
    (44) expression -> . term PLUS term
    (45) expression -> . term MINUS term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    expression                     shift and go to state 93
    term                           shift and go to state 26
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 61

    (43) expression -> term OR . term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    term                           shift and go to state 94
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 62

    (44) expression -> term PLUS . term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    term                           shift and go to state 95
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 63

    (45) expression -> term MINUS . term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    term                           shift and go to state 96
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 64

    (57) factor -> PLUS factor .

    MULTIPLY        reduce using rule 57 (factor -> PLUS factor .)
    DIVIDE          reduce using rule 57 (factor -> PLUS factor .)
    AND             reduce using rule 57 (factor -> PLUS factor .)
    OR              reduce using rule 57 (factor -> PLUS factor .)
    PLUS            reduce using rule 57 (factor -> PLUS factor .)
    MINUS           reduce using rule 57 (factor -> PLUS factor .)
    COMPEQUALS      reduce using rule 57 (factor -> PLUS factor .)
    LESSTHAN        reduce using rule 57 (factor -> PLUS factor .)
    GREATERTHAN     reduce using rule 57 (factor -> PLUS factor .)
    GREATERTHANOREQUALS reduce using rule 57 (factor -> PLUS factor .)
    LESSTHANOREQUALS reduce using rule 57 (factor -> PLUS factor .)
    NOTEQUALS       reduce using rule 57 (factor -> PLUS factor .)
    SEMICOL         reduce using rule 57 (factor -> PLUS factor .)
    CLOSEPAR        reduce using rule 57 (factor -> PLUS factor .)
    COMMA           reduce using rule 57 (factor -> PLUS factor .)


state 65

    (58) factor -> MINUS factor .

    MULTIPLY        reduce using rule 58 (factor -> MINUS factor .)
    DIVIDE          reduce using rule 58 (factor -> MINUS factor .)
    AND             reduce using rule 58 (factor -> MINUS factor .)
    OR              reduce using rule 58 (factor -> MINUS factor .)
    PLUS            reduce using rule 58 (factor -> MINUS factor .)
    MINUS           reduce using rule 58 (factor -> MINUS factor .)
    COMPEQUALS      reduce using rule 58 (factor -> MINUS factor .)
    LESSTHAN        reduce using rule 58 (factor -> MINUS factor .)
    GREATERTHAN     reduce using rule 58 (factor -> MINUS factor .)
    GREATERTHANOREQUALS reduce using rule 58 (factor -> MINUS factor .)
    LESSTHANOREQUALS reduce using rule 58 (factor -> MINUS factor .)
    NOTEQUALS       reduce using rule 58 (factor -> MINUS factor .)
    SEMICOL         reduce using rule 58 (factor -> MINUS factor .)
    CLOSEPAR        reduce using rule 58 (factor -> MINUS factor .)
    COMMA           reduce using rule 58 (factor -> MINUS factor .)


state 66

    (54) term -> factor MULTIPLY . factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    factor                         shift and go to state 97
    function                       shift and go to state 37

state 67

    (55) term -> factor DIVIDE . factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    factor                         shift and go to state 98
    function                       shift and go to state 37

state 68

    (56) term -> factor AND . factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    factor                         shift and go to state 99
    function                       shift and go to state 37

state 69

    (59) factor -> NOT factor .

    MULTIPLY        reduce using rule 59 (factor -> NOT factor .)
    DIVIDE          reduce using rule 59 (factor -> NOT factor .)
    AND             reduce using rule 59 (factor -> NOT factor .)
    OR              reduce using rule 59 (factor -> NOT factor .)
    PLUS            reduce using rule 59 (factor -> NOT factor .)
    MINUS           reduce using rule 59 (factor -> NOT factor .)
    COMPEQUALS      reduce using rule 59 (factor -> NOT factor .)
    LESSTHAN        reduce using rule 59 (factor -> NOT factor .)
    GREATERTHAN     reduce using rule 59 (factor -> NOT factor .)
    GREATERTHANOREQUALS reduce using rule 59 (factor -> NOT factor .)
    LESSTHANOREQUALS reduce using rule 59 (factor -> NOT factor .)
    NOTEQUALS       reduce using rule 59 (factor -> NOT factor .)
    SEMICOL         reduce using rule 59 (factor -> NOT factor .)
    CLOSEPAR        reduce using rule 59 (factor -> NOT factor .)
    COMMA           reduce using rule 59 (factor -> NOT factor .)


state 70

    (63) factor -> OPENPAR relexpr . CLOSEPAR

    CLOSEPAR        shift and go to state 100


state 71

    (14) command -> INT FUNCTION function . block
    (4) block -> . OPENBRACK command CLOSEBRACK
    (5) block -> . OPENBRACK CLOSEBRACK

    OPENBRACK       shift and go to state 18

    block                          shift and go to state 101

state 72

    (18) function -> ID . OPENPAR INT ID CLOSEPAR
    (19) function -> ID . OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> ID . OPENPAR STRING ID CLOSEPAR
    (21) function -> ID . OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> ID . OPENPAR BOOL ID CLOSEPAR
    (23) function -> ID . OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> ID . OPENPAR relexpr CLOSEPAR
    (25) function -> ID . OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> ID . OPENPAR CLOSEPAR

    OPENPAR         shift and go to state 46


state 73

    (36) assignment -> INT ID EQUALS . expression
    (42) expression -> . term
    (43) expression -> . term OR term
    (44) expression -> . term PLUS term
    (45) expression -> . term MINUS term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    expression                     shift and go to state 102
    term                           shift and go to state 26
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 74

    (15) command -> STRING FUNCTION function . block
    (4) block -> . OPENBRACK command CLOSEBRACK
    (5) block -> . OPENBRACK CLOSEBRACK

    OPENBRACK       shift and go to state 18

    block                          shift and go to state 103

state 75

    (37) assignment -> STRING ID EQUALS . expression
    (42) expression -> . term
    (43) expression -> . term OR term
    (44) expression -> . term PLUS term
    (45) expression -> . term MINUS term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    expression                     shift and go to state 104
    term                           shift and go to state 26
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 76

    (16) command -> BOOL FUNCTION function . block
    (4) block -> . OPENBRACK command CLOSEBRACK
    (5) block -> . OPENBRACK CLOSEBRACK

    OPENBRACK       shift and go to state 18

    block                          shift and go to state 105

state 77

    (17) command -> VOID FUNCTION function . block
    (4) block -> . OPENBRACK command CLOSEBRACK
    (5) block -> . OPENBRACK CLOSEBRACK

    OPENBRACK       shift and go to state 18

    block                          shift and go to state 106

state 78

    (18) function -> ID OPENPAR INT . ID CLOSEPAR
    (19) function -> ID OPENPAR INT . ID moreArg CLOSEPAR

    ID              shift and go to state 107


state 79

    (26) function -> ID OPENPAR CLOSEPAR .

    SEMICOL         reduce using rule 26 (function -> ID OPENPAR CLOSEPAR .)
    MULTIPLY        reduce using rule 26 (function -> ID OPENPAR CLOSEPAR .)
    DIVIDE          reduce using rule 26 (function -> ID OPENPAR CLOSEPAR .)
    AND             reduce using rule 26 (function -> ID OPENPAR CLOSEPAR .)
    OR              reduce using rule 26 (function -> ID OPENPAR CLOSEPAR .)
    PLUS            reduce using rule 26 (function -> ID OPENPAR CLOSEPAR .)
    MINUS           reduce using rule 26 (function -> ID OPENPAR CLOSEPAR .)
    COMPEQUALS      reduce using rule 26 (function -> ID OPENPAR CLOSEPAR .)
    LESSTHAN        reduce using rule 26 (function -> ID OPENPAR CLOSEPAR .)
    GREATERTHAN     reduce using rule 26 (function -> ID OPENPAR CLOSEPAR .)
    GREATERTHANOREQUALS reduce using rule 26 (function -> ID OPENPAR CLOSEPAR .)
    LESSTHANOREQUALS reduce using rule 26 (function -> ID OPENPAR CLOSEPAR .)
    NOTEQUALS       reduce using rule 26 (function -> ID OPENPAR CLOSEPAR .)
    CLOSEPAR        reduce using rule 26 (function -> ID OPENPAR CLOSEPAR .)
    COMMA           reduce using rule 26 (function -> ID OPENPAR CLOSEPAR .)
    OPENBRACK       reduce using rule 26 (function -> ID OPENPAR CLOSEPAR .)


state 80

    (20) function -> ID OPENPAR STRING . ID CLOSEPAR
    (21) function -> ID OPENPAR STRING . ID moreArg CLOSEPAR

    ID              shift and go to state 108


state 81

    (22) function -> ID OPENPAR BOOL . ID CLOSEPAR
    (23) function -> ID OPENPAR BOOL . ID moreArg CLOSEPAR

    ID              shift and go to state 109


state 82

    (24) function -> ID OPENPAR relexpr . CLOSEPAR
    (25) function -> ID OPENPAR relexpr . moreArg CLOSEPAR
    (27) moreArg -> . COMMA relexpr
    (28) moreArg -> . COMMA relexpr moreArg
    (29) moreArg -> . COMMA INT ID
    (30) moreArg -> . COMMA INT ID moreArg
    (31) moreArg -> . COMMA STRING ID
    (32) moreArg -> . COMMA STRING ID moreArg
    (33) moreArg -> . COMMA BOOL ID
    (34) moreArg -> . COMMA BOOL ID moreArg

    CLOSEPAR        shift and go to state 110
    COMMA           shift and go to state 112

    moreArg                        shift and go to state 111

state 83

    (35) assignment -> ID EQUALS expression .

    SEMICOL         reduce using rule 35 (assignment -> ID EQUALS expression .)


state 84

    (41) print -> PRINT OPENPAR expression . CLOSEPAR

    CLOSEPAR        shift and go to state 113


state 85

    (4) block -> OPENBRACK command CLOSEBRACK .

    RETURN          reduce using rule 4 (block -> OPENBRACK command CLOSEBRACK .)
    INT             reduce using rule 4 (block -> OPENBRACK command CLOSEBRACK .)
    STRING          reduce using rule 4 (block -> OPENBRACK command CLOSEBRACK .)
    BOOL            reduce using rule 4 (block -> OPENBRACK command CLOSEBRACK .)
    VOID            reduce using rule 4 (block -> OPENBRACK command CLOSEBRACK .)
    ID              reduce using rule 4 (block -> OPENBRACK command CLOSEBRACK .)
    PRINT           reduce using rule 4 (block -> OPENBRACK command CLOSEBRACK .)
    OPENBRACK       reduce using rule 4 (block -> OPENBRACK command CLOSEBRACK .)
    LOOP            reduce using rule 4 (block -> OPENBRACK command CLOSEBRACK .)
    IF              reduce using rule 4 (block -> OPENBRACK command CLOSEBRACK .)
    SEMICOL         reduce using rule 4 (block -> OPENBRACK command CLOSEBRACK .)
    $end            reduce using rule 4 (block -> OPENBRACK command CLOSEBRACK .)
    CLOSEBRACK      reduce using rule 4 (block -> OPENBRACK command CLOSEBRACK .)
    ELSE            reduce using rule 4 (block -> OPENBRACK command CLOSEBRACK .)


state 86

    (38) while -> LOOP WHILE OPENPAR . relexpr CLOSEPAR block
    (46) relexpr -> . expression
    (47) relexpr -> . expression COMPEQUALS expression
    (48) relexpr -> . expression LESSTHAN expression
    (49) relexpr -> . expression GREATERTHAN expression
    (50) relexpr -> . expression GREATERTHANOREQUALS expression
    (51) relexpr -> . expression LESSTHANOREQUALS expression
    (52) relexpr -> . expression NOTEQUALS expression
    (42) expression -> . term
    (43) expression -> . term OR term
    (44) expression -> . term PLUS term
    (45) expression -> . term MINUS term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    relexpr                        shift and go to state 114
    expression                     shift and go to state 25
    term                           shift and go to state 26
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 87

    (39) if -> IF OPENPAR relexpr . CLOSEPAR block
    (40) if -> IF OPENPAR relexpr . CLOSEPAR block ELSE block

    CLOSEPAR        shift and go to state 115


state 88

    (47) relexpr -> expression COMPEQUALS expression .

    SEMICOL         reduce using rule 47 (relexpr -> expression COMPEQUALS expression .)
    CLOSEPAR        reduce using rule 47 (relexpr -> expression COMPEQUALS expression .)
    COMMA           reduce using rule 47 (relexpr -> expression COMPEQUALS expression .)


state 89

    (48) relexpr -> expression LESSTHAN expression .

    SEMICOL         reduce using rule 48 (relexpr -> expression LESSTHAN expression .)
    CLOSEPAR        reduce using rule 48 (relexpr -> expression LESSTHAN expression .)
    COMMA           reduce using rule 48 (relexpr -> expression LESSTHAN expression .)


state 90

    (49) relexpr -> expression GREATERTHAN expression .

    SEMICOL         reduce using rule 49 (relexpr -> expression GREATERTHAN expression .)
    CLOSEPAR        reduce using rule 49 (relexpr -> expression GREATERTHAN expression .)
    COMMA           reduce using rule 49 (relexpr -> expression GREATERTHAN expression .)


state 91

    (50) relexpr -> expression GREATERTHANOREQUALS expression .

    SEMICOL         reduce using rule 50 (relexpr -> expression GREATERTHANOREQUALS expression .)
    CLOSEPAR        reduce using rule 50 (relexpr -> expression GREATERTHANOREQUALS expression .)
    COMMA           reduce using rule 50 (relexpr -> expression GREATERTHANOREQUALS expression .)


state 92

    (51) relexpr -> expression LESSTHANOREQUALS expression .

    SEMICOL         reduce using rule 51 (relexpr -> expression LESSTHANOREQUALS expression .)
    CLOSEPAR        reduce using rule 51 (relexpr -> expression LESSTHANOREQUALS expression .)
    COMMA           reduce using rule 51 (relexpr -> expression LESSTHANOREQUALS expression .)


state 93

    (52) relexpr -> expression NOTEQUALS expression .

    SEMICOL         reduce using rule 52 (relexpr -> expression NOTEQUALS expression .)
    CLOSEPAR        reduce using rule 52 (relexpr -> expression NOTEQUALS expression .)
    COMMA           reduce using rule 52 (relexpr -> expression NOTEQUALS expression .)


state 94

    (43) expression -> term OR term .

    COMPEQUALS      reduce using rule 43 (expression -> term OR term .)
    LESSTHAN        reduce using rule 43 (expression -> term OR term .)
    GREATERTHAN     reduce using rule 43 (expression -> term OR term .)
    GREATERTHANOREQUALS reduce using rule 43 (expression -> term OR term .)
    LESSTHANOREQUALS reduce using rule 43 (expression -> term OR term .)
    NOTEQUALS       reduce using rule 43 (expression -> term OR term .)
    SEMICOL         reduce using rule 43 (expression -> term OR term .)
    CLOSEPAR        reduce using rule 43 (expression -> term OR term .)
    COMMA           reduce using rule 43 (expression -> term OR term .)


state 95

    (44) expression -> term PLUS term .

    COMPEQUALS      reduce using rule 44 (expression -> term PLUS term .)
    LESSTHAN        reduce using rule 44 (expression -> term PLUS term .)
    GREATERTHAN     reduce using rule 44 (expression -> term PLUS term .)
    GREATERTHANOREQUALS reduce using rule 44 (expression -> term PLUS term .)
    LESSTHANOREQUALS reduce using rule 44 (expression -> term PLUS term .)
    NOTEQUALS       reduce using rule 44 (expression -> term PLUS term .)
    SEMICOL         reduce using rule 44 (expression -> term PLUS term .)
    CLOSEPAR        reduce using rule 44 (expression -> term PLUS term .)
    COMMA           reduce using rule 44 (expression -> term PLUS term .)


state 96

    (45) expression -> term MINUS term .

    COMPEQUALS      reduce using rule 45 (expression -> term MINUS term .)
    LESSTHAN        reduce using rule 45 (expression -> term MINUS term .)
    GREATERTHAN     reduce using rule 45 (expression -> term MINUS term .)
    GREATERTHANOREQUALS reduce using rule 45 (expression -> term MINUS term .)
    LESSTHANOREQUALS reduce using rule 45 (expression -> term MINUS term .)
    NOTEQUALS       reduce using rule 45 (expression -> term MINUS term .)
    SEMICOL         reduce using rule 45 (expression -> term MINUS term .)
    CLOSEPAR        reduce using rule 45 (expression -> term MINUS term .)
    COMMA           reduce using rule 45 (expression -> term MINUS term .)


state 97

    (54) term -> factor MULTIPLY factor .

    OR              reduce using rule 54 (term -> factor MULTIPLY factor .)
    PLUS            reduce using rule 54 (term -> factor MULTIPLY factor .)
    MINUS           reduce using rule 54 (term -> factor MULTIPLY factor .)
    COMPEQUALS      reduce using rule 54 (term -> factor MULTIPLY factor .)
    LESSTHAN        reduce using rule 54 (term -> factor MULTIPLY factor .)
    GREATERTHAN     reduce using rule 54 (term -> factor MULTIPLY factor .)
    GREATERTHANOREQUALS reduce using rule 54 (term -> factor MULTIPLY factor .)
    LESSTHANOREQUALS reduce using rule 54 (term -> factor MULTIPLY factor .)
    NOTEQUALS       reduce using rule 54 (term -> factor MULTIPLY factor .)
    SEMICOL         reduce using rule 54 (term -> factor MULTIPLY factor .)
    CLOSEPAR        reduce using rule 54 (term -> factor MULTIPLY factor .)
    COMMA           reduce using rule 54 (term -> factor MULTIPLY factor .)


state 98

    (55) term -> factor DIVIDE factor .

    OR              reduce using rule 55 (term -> factor DIVIDE factor .)
    PLUS            reduce using rule 55 (term -> factor DIVIDE factor .)
    MINUS           reduce using rule 55 (term -> factor DIVIDE factor .)
    COMPEQUALS      reduce using rule 55 (term -> factor DIVIDE factor .)
    LESSTHAN        reduce using rule 55 (term -> factor DIVIDE factor .)
    GREATERTHAN     reduce using rule 55 (term -> factor DIVIDE factor .)
    GREATERTHANOREQUALS reduce using rule 55 (term -> factor DIVIDE factor .)
    LESSTHANOREQUALS reduce using rule 55 (term -> factor DIVIDE factor .)
    NOTEQUALS       reduce using rule 55 (term -> factor DIVIDE factor .)
    SEMICOL         reduce using rule 55 (term -> factor DIVIDE factor .)
    CLOSEPAR        reduce using rule 55 (term -> factor DIVIDE factor .)
    COMMA           reduce using rule 55 (term -> factor DIVIDE factor .)


state 99

    (56) term -> factor AND factor .

    OR              reduce using rule 56 (term -> factor AND factor .)
    PLUS            reduce using rule 56 (term -> factor AND factor .)
    MINUS           reduce using rule 56 (term -> factor AND factor .)
    COMPEQUALS      reduce using rule 56 (term -> factor AND factor .)
    LESSTHAN        reduce using rule 56 (term -> factor AND factor .)
    GREATERTHAN     reduce using rule 56 (term -> factor AND factor .)
    GREATERTHANOREQUALS reduce using rule 56 (term -> factor AND factor .)
    LESSTHANOREQUALS reduce using rule 56 (term -> factor AND factor .)
    NOTEQUALS       reduce using rule 56 (term -> factor AND factor .)
    SEMICOL         reduce using rule 56 (term -> factor AND factor .)
    CLOSEPAR        reduce using rule 56 (term -> factor AND factor .)
    COMMA           reduce using rule 56 (term -> factor AND factor .)


state 100

    (63) factor -> OPENPAR relexpr CLOSEPAR .

    MULTIPLY        reduce using rule 63 (factor -> OPENPAR relexpr CLOSEPAR .)
    DIVIDE          reduce using rule 63 (factor -> OPENPAR relexpr CLOSEPAR .)
    AND             reduce using rule 63 (factor -> OPENPAR relexpr CLOSEPAR .)
    OR              reduce using rule 63 (factor -> OPENPAR relexpr CLOSEPAR .)
    PLUS            reduce using rule 63 (factor -> OPENPAR relexpr CLOSEPAR .)
    MINUS           reduce using rule 63 (factor -> OPENPAR relexpr CLOSEPAR .)
    COMPEQUALS      reduce using rule 63 (factor -> OPENPAR relexpr CLOSEPAR .)
    LESSTHAN        reduce using rule 63 (factor -> OPENPAR relexpr CLOSEPAR .)
    GREATERTHAN     reduce using rule 63 (factor -> OPENPAR relexpr CLOSEPAR .)
    GREATERTHANOREQUALS reduce using rule 63 (factor -> OPENPAR relexpr CLOSEPAR .)
    LESSTHANOREQUALS reduce using rule 63 (factor -> OPENPAR relexpr CLOSEPAR .)
    NOTEQUALS       reduce using rule 63 (factor -> OPENPAR relexpr CLOSEPAR .)
    SEMICOL         reduce using rule 63 (factor -> OPENPAR relexpr CLOSEPAR .)
    CLOSEPAR        reduce using rule 63 (factor -> OPENPAR relexpr CLOSEPAR .)
    COMMA           reduce using rule 63 (factor -> OPENPAR relexpr CLOSEPAR .)


state 101

    (14) command -> INT FUNCTION function block .

    RETURN          reduce using rule 14 (command -> INT FUNCTION function block .)
    INT             reduce using rule 14 (command -> INT FUNCTION function block .)
    STRING          reduce using rule 14 (command -> INT FUNCTION function block .)
    BOOL            reduce using rule 14 (command -> INT FUNCTION function block .)
    VOID            reduce using rule 14 (command -> INT FUNCTION function block .)
    ID              reduce using rule 14 (command -> INT FUNCTION function block .)
    PRINT           reduce using rule 14 (command -> INT FUNCTION function block .)
    OPENBRACK       reduce using rule 14 (command -> INT FUNCTION function block .)
    LOOP            reduce using rule 14 (command -> INT FUNCTION function block .)
    IF              reduce using rule 14 (command -> INT FUNCTION function block .)
    SEMICOL         reduce using rule 14 (command -> INT FUNCTION function block .)
    $end            reduce using rule 14 (command -> INT FUNCTION function block .)
    CLOSEBRACK      reduce using rule 14 (command -> INT FUNCTION function block .)


state 102

    (36) assignment -> INT ID EQUALS expression .

    SEMICOL         reduce using rule 36 (assignment -> INT ID EQUALS expression .)


state 103

    (15) command -> STRING FUNCTION function block .

    RETURN          reduce using rule 15 (command -> STRING FUNCTION function block .)
    INT             reduce using rule 15 (command -> STRING FUNCTION function block .)
    STRING          reduce using rule 15 (command -> STRING FUNCTION function block .)
    BOOL            reduce using rule 15 (command -> STRING FUNCTION function block .)
    VOID            reduce using rule 15 (command -> STRING FUNCTION function block .)
    ID              reduce using rule 15 (command -> STRING FUNCTION function block .)
    PRINT           reduce using rule 15 (command -> STRING FUNCTION function block .)
    OPENBRACK       reduce using rule 15 (command -> STRING FUNCTION function block .)
    LOOP            reduce using rule 15 (command -> STRING FUNCTION function block .)
    IF              reduce using rule 15 (command -> STRING FUNCTION function block .)
    SEMICOL         reduce using rule 15 (command -> STRING FUNCTION function block .)
    $end            reduce using rule 15 (command -> STRING FUNCTION function block .)
    CLOSEBRACK      reduce using rule 15 (command -> STRING FUNCTION function block .)


state 104

    (37) assignment -> STRING ID EQUALS expression .

    SEMICOL         reduce using rule 37 (assignment -> STRING ID EQUALS expression .)


state 105

    (16) command -> BOOL FUNCTION function block .

    RETURN          reduce using rule 16 (command -> BOOL FUNCTION function block .)
    INT             reduce using rule 16 (command -> BOOL FUNCTION function block .)
    STRING          reduce using rule 16 (command -> BOOL FUNCTION function block .)
    BOOL            reduce using rule 16 (command -> BOOL FUNCTION function block .)
    VOID            reduce using rule 16 (command -> BOOL FUNCTION function block .)
    ID              reduce using rule 16 (command -> BOOL FUNCTION function block .)
    PRINT           reduce using rule 16 (command -> BOOL FUNCTION function block .)
    OPENBRACK       reduce using rule 16 (command -> BOOL FUNCTION function block .)
    LOOP            reduce using rule 16 (command -> BOOL FUNCTION function block .)
    IF              reduce using rule 16 (command -> BOOL FUNCTION function block .)
    SEMICOL         reduce using rule 16 (command -> BOOL FUNCTION function block .)
    $end            reduce using rule 16 (command -> BOOL FUNCTION function block .)
    CLOSEBRACK      reduce using rule 16 (command -> BOOL FUNCTION function block .)


state 106

    (17) command -> VOID FUNCTION function block .

    RETURN          reduce using rule 17 (command -> VOID FUNCTION function block .)
    INT             reduce using rule 17 (command -> VOID FUNCTION function block .)
    STRING          reduce using rule 17 (command -> VOID FUNCTION function block .)
    BOOL            reduce using rule 17 (command -> VOID FUNCTION function block .)
    VOID            reduce using rule 17 (command -> VOID FUNCTION function block .)
    ID              reduce using rule 17 (command -> VOID FUNCTION function block .)
    PRINT           reduce using rule 17 (command -> VOID FUNCTION function block .)
    OPENBRACK       reduce using rule 17 (command -> VOID FUNCTION function block .)
    LOOP            reduce using rule 17 (command -> VOID FUNCTION function block .)
    IF              reduce using rule 17 (command -> VOID FUNCTION function block .)
    SEMICOL         reduce using rule 17 (command -> VOID FUNCTION function block .)
    $end            reduce using rule 17 (command -> VOID FUNCTION function block .)
    CLOSEBRACK      reduce using rule 17 (command -> VOID FUNCTION function block .)


state 107

    (18) function -> ID OPENPAR INT ID . CLOSEPAR
    (19) function -> ID OPENPAR INT ID . moreArg CLOSEPAR
    (27) moreArg -> . COMMA relexpr
    (28) moreArg -> . COMMA relexpr moreArg
    (29) moreArg -> . COMMA INT ID
    (30) moreArg -> . COMMA INT ID moreArg
    (31) moreArg -> . COMMA STRING ID
    (32) moreArg -> . COMMA STRING ID moreArg
    (33) moreArg -> . COMMA BOOL ID
    (34) moreArg -> . COMMA BOOL ID moreArg

    CLOSEPAR        shift and go to state 116
    COMMA           shift and go to state 112

    moreArg                        shift and go to state 117

state 108

    (20) function -> ID OPENPAR STRING ID . CLOSEPAR
    (21) function -> ID OPENPAR STRING ID . moreArg CLOSEPAR
    (27) moreArg -> . COMMA relexpr
    (28) moreArg -> . COMMA relexpr moreArg
    (29) moreArg -> . COMMA INT ID
    (30) moreArg -> . COMMA INT ID moreArg
    (31) moreArg -> . COMMA STRING ID
    (32) moreArg -> . COMMA STRING ID moreArg
    (33) moreArg -> . COMMA BOOL ID
    (34) moreArg -> . COMMA BOOL ID moreArg

    CLOSEPAR        shift and go to state 118
    COMMA           shift and go to state 112

    moreArg                        shift and go to state 119

state 109

    (22) function -> ID OPENPAR BOOL ID . CLOSEPAR
    (23) function -> ID OPENPAR BOOL ID . moreArg CLOSEPAR
    (27) moreArg -> . COMMA relexpr
    (28) moreArg -> . COMMA relexpr moreArg
    (29) moreArg -> . COMMA INT ID
    (30) moreArg -> . COMMA INT ID moreArg
    (31) moreArg -> . COMMA STRING ID
    (32) moreArg -> . COMMA STRING ID moreArg
    (33) moreArg -> . COMMA BOOL ID
    (34) moreArg -> . COMMA BOOL ID moreArg

    CLOSEPAR        shift and go to state 120
    COMMA           shift and go to state 112

    moreArg                        shift and go to state 121

state 110

    (24) function -> ID OPENPAR relexpr CLOSEPAR .

    SEMICOL         reduce using rule 24 (function -> ID OPENPAR relexpr CLOSEPAR .)
    MULTIPLY        reduce using rule 24 (function -> ID OPENPAR relexpr CLOSEPAR .)
    DIVIDE          reduce using rule 24 (function -> ID OPENPAR relexpr CLOSEPAR .)
    AND             reduce using rule 24 (function -> ID OPENPAR relexpr CLOSEPAR .)
    OR              reduce using rule 24 (function -> ID OPENPAR relexpr CLOSEPAR .)
    PLUS            reduce using rule 24 (function -> ID OPENPAR relexpr CLOSEPAR .)
    MINUS           reduce using rule 24 (function -> ID OPENPAR relexpr CLOSEPAR .)
    COMPEQUALS      reduce using rule 24 (function -> ID OPENPAR relexpr CLOSEPAR .)
    LESSTHAN        reduce using rule 24 (function -> ID OPENPAR relexpr CLOSEPAR .)
    GREATERTHAN     reduce using rule 24 (function -> ID OPENPAR relexpr CLOSEPAR .)
    GREATERTHANOREQUALS reduce using rule 24 (function -> ID OPENPAR relexpr CLOSEPAR .)
    LESSTHANOREQUALS reduce using rule 24 (function -> ID OPENPAR relexpr CLOSEPAR .)
    NOTEQUALS       reduce using rule 24 (function -> ID OPENPAR relexpr CLOSEPAR .)
    CLOSEPAR        reduce using rule 24 (function -> ID OPENPAR relexpr CLOSEPAR .)
    COMMA           reduce using rule 24 (function -> ID OPENPAR relexpr CLOSEPAR .)
    OPENBRACK       reduce using rule 24 (function -> ID OPENPAR relexpr CLOSEPAR .)


state 111

    (25) function -> ID OPENPAR relexpr moreArg . CLOSEPAR

    CLOSEPAR        shift and go to state 122


state 112

    (27) moreArg -> COMMA . relexpr
    (28) moreArg -> COMMA . relexpr moreArg
    (29) moreArg -> COMMA . INT ID
    (30) moreArg -> COMMA . INT ID moreArg
    (31) moreArg -> COMMA . STRING ID
    (32) moreArg -> COMMA . STRING ID moreArg
    (33) moreArg -> COMMA . BOOL ID
    (34) moreArg -> COMMA . BOOL ID moreArg
    (46) relexpr -> . expression
    (47) relexpr -> . expression COMPEQUALS expression
    (48) relexpr -> . expression LESSTHAN expression
    (49) relexpr -> . expression GREATERTHAN expression
    (50) relexpr -> . expression GREATERTHANOREQUALS expression
    (51) relexpr -> . expression LESSTHANOREQUALS expression
    (52) relexpr -> . expression NOTEQUALS expression
    (42) expression -> . term
    (43) expression -> . term OR term
    (44) expression -> . term PLUS term
    (45) expression -> . term MINUS term
    (53) term -> . factor
    (54) term -> . factor MULTIPLY factor
    (55) term -> . factor DIVIDE factor
    (56) term -> . factor AND factor
    (57) factor -> . PLUS factor
    (58) factor -> . MINUS factor
    (59) factor -> . NOT factor
    (60) factor -> . NUMBER
    (61) factor -> . TRUE
    (62) factor -> . FALSE
    (63) factor -> . OPENPAR relexpr CLOSEPAR
    (64) factor -> . ID
    (65) factor -> . NORMSTRING
    (66) factor -> . function
    (18) function -> . ID OPENPAR INT ID CLOSEPAR
    (19) function -> . ID OPENPAR INT ID moreArg CLOSEPAR
    (20) function -> . ID OPENPAR STRING ID CLOSEPAR
    (21) function -> . ID OPENPAR STRING ID moreArg CLOSEPAR
    (22) function -> . ID OPENPAR BOOL ID CLOSEPAR
    (23) function -> . ID OPENPAR BOOL ID moreArg CLOSEPAR
    (24) function -> . ID OPENPAR relexpr CLOSEPAR
    (25) function -> . ID OPENPAR relexpr moreArg CLOSEPAR
    (26) function -> . ID OPENPAR CLOSEPAR

    INT             shift and go to state 124
    STRING          shift and go to state 125
    BOOL            shift and go to state 126
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 30
    NUMBER          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    OPENPAR         shift and go to state 34
    ID              shift and go to state 35
    NORMSTRING      shift and go to state 36

    relexpr                        shift and go to state 123
    expression                     shift and go to state 25
    term                           shift and go to state 26
    factor                         shift and go to state 29
    function                       shift and go to state 37

state 113

    (41) print -> PRINT OPENPAR expression CLOSEPAR .

    SEMICOL         reduce using rule 41 (print -> PRINT OPENPAR expression CLOSEPAR .)


state 114

    (38) while -> LOOP WHILE OPENPAR relexpr . CLOSEPAR block

    CLOSEPAR        shift and go to state 127


state 115

    (39) if -> IF OPENPAR relexpr CLOSEPAR . block
    (40) if -> IF OPENPAR relexpr CLOSEPAR . block ELSE block
    (4) block -> . OPENBRACK command CLOSEBRACK
    (5) block -> . OPENBRACK CLOSEBRACK

    OPENBRACK       shift and go to state 18

    block                          shift and go to state 128

state 116

    (18) function -> ID OPENPAR INT ID CLOSEPAR .

    SEMICOL         reduce using rule 18 (function -> ID OPENPAR INT ID CLOSEPAR .)
    MULTIPLY        reduce using rule 18 (function -> ID OPENPAR INT ID CLOSEPAR .)
    DIVIDE          reduce using rule 18 (function -> ID OPENPAR INT ID CLOSEPAR .)
    AND             reduce using rule 18 (function -> ID OPENPAR INT ID CLOSEPAR .)
    OR              reduce using rule 18 (function -> ID OPENPAR INT ID CLOSEPAR .)
    PLUS            reduce using rule 18 (function -> ID OPENPAR INT ID CLOSEPAR .)
    MINUS           reduce using rule 18 (function -> ID OPENPAR INT ID CLOSEPAR .)
    COMPEQUALS      reduce using rule 18 (function -> ID OPENPAR INT ID CLOSEPAR .)
    LESSTHAN        reduce using rule 18 (function -> ID OPENPAR INT ID CLOSEPAR .)
    GREATERTHAN     reduce using rule 18 (function -> ID OPENPAR INT ID CLOSEPAR .)
    GREATERTHANOREQUALS reduce using rule 18 (function -> ID OPENPAR INT ID CLOSEPAR .)
    LESSTHANOREQUALS reduce using rule 18 (function -> ID OPENPAR INT ID CLOSEPAR .)
    NOTEQUALS       reduce using rule 18 (function -> ID OPENPAR INT ID CLOSEPAR .)
    CLOSEPAR        reduce using rule 18 (function -> ID OPENPAR INT ID CLOSEPAR .)
    COMMA           reduce using rule 18 (function -> ID OPENPAR INT ID CLOSEPAR .)
    OPENBRACK       reduce using rule 18 (function -> ID OPENPAR INT ID CLOSEPAR .)


state 117

    (19) function -> ID OPENPAR INT ID moreArg . CLOSEPAR

    CLOSEPAR        shift and go to state 129


state 118

    (20) function -> ID OPENPAR STRING ID CLOSEPAR .

    SEMICOL         reduce using rule 20 (function -> ID OPENPAR STRING ID CLOSEPAR .)
    MULTIPLY        reduce using rule 20 (function -> ID OPENPAR STRING ID CLOSEPAR .)
    DIVIDE          reduce using rule 20 (function -> ID OPENPAR STRING ID CLOSEPAR .)
    AND             reduce using rule 20 (function -> ID OPENPAR STRING ID CLOSEPAR .)
    OR              reduce using rule 20 (function -> ID OPENPAR STRING ID CLOSEPAR .)
    PLUS            reduce using rule 20 (function -> ID OPENPAR STRING ID CLOSEPAR .)
    MINUS           reduce using rule 20 (function -> ID OPENPAR STRING ID CLOSEPAR .)
    COMPEQUALS      reduce using rule 20 (function -> ID OPENPAR STRING ID CLOSEPAR .)
    LESSTHAN        reduce using rule 20 (function -> ID OPENPAR STRING ID CLOSEPAR .)
    GREATERTHAN     reduce using rule 20 (function -> ID OPENPAR STRING ID CLOSEPAR .)
    GREATERTHANOREQUALS reduce using rule 20 (function -> ID OPENPAR STRING ID CLOSEPAR .)
    LESSTHANOREQUALS reduce using rule 20 (function -> ID OPENPAR STRING ID CLOSEPAR .)
    NOTEQUALS       reduce using rule 20 (function -> ID OPENPAR STRING ID CLOSEPAR .)
    CLOSEPAR        reduce using rule 20 (function -> ID OPENPAR STRING ID CLOSEPAR .)
    COMMA           reduce using rule 20 (function -> ID OPENPAR STRING ID CLOSEPAR .)
    OPENBRACK       reduce using rule 20 (function -> ID OPENPAR STRING ID CLOSEPAR .)


state 119

    (21) function -> ID OPENPAR STRING ID moreArg . CLOSEPAR

    CLOSEPAR        shift and go to state 130


state 120

    (22) function -> ID OPENPAR BOOL ID CLOSEPAR .

    SEMICOL         reduce using rule 22 (function -> ID OPENPAR BOOL ID CLOSEPAR .)
    MULTIPLY        reduce using rule 22 (function -> ID OPENPAR BOOL ID CLOSEPAR .)
    DIVIDE          reduce using rule 22 (function -> ID OPENPAR BOOL ID CLOSEPAR .)
    AND             reduce using rule 22 (function -> ID OPENPAR BOOL ID CLOSEPAR .)
    OR              reduce using rule 22 (function -> ID OPENPAR BOOL ID CLOSEPAR .)
    PLUS            reduce using rule 22 (function -> ID OPENPAR BOOL ID CLOSEPAR .)
    MINUS           reduce using rule 22 (function -> ID OPENPAR BOOL ID CLOSEPAR .)
    COMPEQUALS      reduce using rule 22 (function -> ID OPENPAR BOOL ID CLOSEPAR .)
    LESSTHAN        reduce using rule 22 (function -> ID OPENPAR BOOL ID CLOSEPAR .)
    GREATERTHAN     reduce using rule 22 (function -> ID OPENPAR BOOL ID CLOSEPAR .)
    GREATERTHANOREQUALS reduce using rule 22 (function -> ID OPENPAR BOOL ID CLOSEPAR .)
    LESSTHANOREQUALS reduce using rule 22 (function -> ID OPENPAR BOOL ID CLOSEPAR .)
    NOTEQUALS       reduce using rule 22 (function -> ID OPENPAR BOOL ID CLOSEPAR .)
    CLOSEPAR        reduce using rule 22 (function -> ID OPENPAR BOOL ID CLOSEPAR .)
    COMMA           reduce using rule 22 (function -> ID OPENPAR BOOL ID CLOSEPAR .)
    OPENBRACK       reduce using rule 22 (function -> ID OPENPAR BOOL ID CLOSEPAR .)


state 121

    (23) function -> ID OPENPAR BOOL ID moreArg . CLOSEPAR

    CLOSEPAR        shift and go to state 131


state 122

    (25) function -> ID OPENPAR relexpr moreArg CLOSEPAR .

    SEMICOL         reduce using rule 25 (function -> ID OPENPAR relexpr moreArg CLOSEPAR .)
    MULTIPLY        reduce using rule 25 (function -> ID OPENPAR relexpr moreArg CLOSEPAR .)
    DIVIDE          reduce using rule 25 (function -> ID OPENPAR relexpr moreArg CLOSEPAR .)
    AND             reduce using rule 25 (function -> ID OPENPAR relexpr moreArg CLOSEPAR .)
    OR              reduce using rule 25 (function -> ID OPENPAR relexpr moreArg CLOSEPAR .)
    PLUS            reduce using rule 25 (function -> ID OPENPAR relexpr moreArg CLOSEPAR .)
    MINUS           reduce using rule 25 (function -> ID OPENPAR relexpr moreArg CLOSEPAR .)
    COMPEQUALS      reduce using rule 25 (function -> ID OPENPAR relexpr moreArg CLOSEPAR .)
    LESSTHAN        reduce using rule 25 (function -> ID OPENPAR relexpr moreArg CLOSEPAR .)
    GREATERTHAN     reduce using rule 25 (function -> ID OPENPAR relexpr moreArg CLOSEPAR .)
    GREATERTHANOREQUALS reduce using rule 25 (function -> ID OPENPAR relexpr moreArg CLOSEPAR .)
    LESSTHANOREQUALS reduce using rule 25 (function -> ID OPENPAR relexpr moreArg CLOSEPAR .)
    NOTEQUALS       reduce using rule 25 (function -> ID OPENPAR relexpr moreArg CLOSEPAR .)
    CLOSEPAR        reduce using rule 25 (function -> ID OPENPAR relexpr moreArg CLOSEPAR .)
    COMMA           reduce using rule 25 (function -> ID OPENPAR relexpr moreArg CLOSEPAR .)
    OPENBRACK       reduce using rule 25 (function -> ID OPENPAR relexpr moreArg CLOSEPAR .)


state 123

    (27) moreArg -> COMMA relexpr .
    (28) moreArg -> COMMA relexpr . moreArg
    (27) moreArg -> . COMMA relexpr
    (28) moreArg -> . COMMA relexpr moreArg
    (29) moreArg -> . COMMA INT ID
    (30) moreArg -> . COMMA INT ID moreArg
    (31) moreArg -> . COMMA STRING ID
    (32) moreArg -> . COMMA STRING ID moreArg
    (33) moreArg -> . COMMA BOOL ID
    (34) moreArg -> . COMMA BOOL ID moreArg

    CLOSEPAR        reduce using rule 27 (moreArg -> COMMA relexpr .)
    COMMA           shift and go to state 112

    moreArg                        shift and go to state 132

state 124

    (29) moreArg -> COMMA INT . ID
    (30) moreArg -> COMMA INT . ID moreArg

    ID              shift and go to state 133


state 125

    (31) moreArg -> COMMA STRING . ID
    (32) moreArg -> COMMA STRING . ID moreArg

    ID              shift and go to state 134


state 126

    (33) moreArg -> COMMA BOOL . ID
    (34) moreArg -> COMMA BOOL . ID moreArg

    ID              shift and go to state 135


state 127

    (38) while -> LOOP WHILE OPENPAR relexpr CLOSEPAR . block
    (4) block -> . OPENBRACK command CLOSEBRACK
    (5) block -> . OPENBRACK CLOSEBRACK

    OPENBRACK       shift and go to state 18

    block                          shift and go to state 136

state 128

    (39) if -> IF OPENPAR relexpr CLOSEPAR block .
    (40) if -> IF OPENPAR relexpr CLOSEPAR block . ELSE block

    RETURN          reduce using rule 39 (if -> IF OPENPAR relexpr CLOSEPAR block .)
    INT             reduce using rule 39 (if -> IF OPENPAR relexpr CLOSEPAR block .)
    STRING          reduce using rule 39 (if -> IF OPENPAR relexpr CLOSEPAR block .)
    BOOL            reduce using rule 39 (if -> IF OPENPAR relexpr CLOSEPAR block .)
    VOID            reduce using rule 39 (if -> IF OPENPAR relexpr CLOSEPAR block .)
    ID              reduce using rule 39 (if -> IF OPENPAR relexpr CLOSEPAR block .)
    PRINT           reduce using rule 39 (if -> IF OPENPAR relexpr CLOSEPAR block .)
    OPENBRACK       reduce using rule 39 (if -> IF OPENPAR relexpr CLOSEPAR block .)
    LOOP            reduce using rule 39 (if -> IF OPENPAR relexpr CLOSEPAR block .)
    IF              reduce using rule 39 (if -> IF OPENPAR relexpr CLOSEPAR block .)
    SEMICOL         reduce using rule 39 (if -> IF OPENPAR relexpr CLOSEPAR block .)
    $end            reduce using rule 39 (if -> IF OPENPAR relexpr CLOSEPAR block .)
    CLOSEBRACK      reduce using rule 39 (if -> IF OPENPAR relexpr CLOSEPAR block .)
    ELSE            shift and go to state 137


state 129

    (19) function -> ID OPENPAR INT ID moreArg CLOSEPAR .

    SEMICOL         reduce using rule 19 (function -> ID OPENPAR INT ID moreArg CLOSEPAR .)
    MULTIPLY        reduce using rule 19 (function -> ID OPENPAR INT ID moreArg CLOSEPAR .)
    DIVIDE          reduce using rule 19 (function -> ID OPENPAR INT ID moreArg CLOSEPAR .)
    AND             reduce using rule 19 (function -> ID OPENPAR INT ID moreArg CLOSEPAR .)
    OR              reduce using rule 19 (function -> ID OPENPAR INT ID moreArg CLOSEPAR .)
    PLUS            reduce using rule 19 (function -> ID OPENPAR INT ID moreArg CLOSEPAR .)
    MINUS           reduce using rule 19 (function -> ID OPENPAR INT ID moreArg CLOSEPAR .)
    COMPEQUALS      reduce using rule 19 (function -> ID OPENPAR INT ID moreArg CLOSEPAR .)
    LESSTHAN        reduce using rule 19 (function -> ID OPENPAR INT ID moreArg CLOSEPAR .)
    GREATERTHAN     reduce using rule 19 (function -> ID OPENPAR INT ID moreArg CLOSEPAR .)
    GREATERTHANOREQUALS reduce using rule 19 (function -> ID OPENPAR INT ID moreArg CLOSEPAR .)
    LESSTHANOREQUALS reduce using rule 19 (function -> ID OPENPAR INT ID moreArg CLOSEPAR .)
    NOTEQUALS       reduce using rule 19 (function -> ID OPENPAR INT ID moreArg CLOSEPAR .)
    CLOSEPAR        reduce using rule 19 (function -> ID OPENPAR INT ID moreArg CLOSEPAR .)
    COMMA           reduce using rule 19 (function -> ID OPENPAR INT ID moreArg CLOSEPAR .)
    OPENBRACK       reduce using rule 19 (function -> ID OPENPAR INT ID moreArg CLOSEPAR .)


state 130

    (21) function -> ID OPENPAR STRING ID moreArg CLOSEPAR .

    SEMICOL         reduce using rule 21 (function -> ID OPENPAR STRING ID moreArg CLOSEPAR .)
    MULTIPLY        reduce using rule 21 (function -> ID OPENPAR STRING ID moreArg CLOSEPAR .)
    DIVIDE          reduce using rule 21 (function -> ID OPENPAR STRING ID moreArg CLOSEPAR .)
    AND             reduce using rule 21 (function -> ID OPENPAR STRING ID moreArg CLOSEPAR .)
    OR              reduce using rule 21 (function -> ID OPENPAR STRING ID moreArg CLOSEPAR .)
    PLUS            reduce using rule 21 (function -> ID OPENPAR STRING ID moreArg CLOSEPAR .)
    MINUS           reduce using rule 21 (function -> ID OPENPAR STRING ID moreArg CLOSEPAR .)
    COMPEQUALS      reduce using rule 21 (function -> ID OPENPAR STRING ID moreArg CLOSEPAR .)
    LESSTHAN        reduce using rule 21 (function -> ID OPENPAR STRING ID moreArg CLOSEPAR .)
    GREATERTHAN     reduce using rule 21 (function -> ID OPENPAR STRING ID moreArg CLOSEPAR .)
    GREATERTHANOREQUALS reduce using rule 21 (function -> ID OPENPAR STRING ID moreArg CLOSEPAR .)
    LESSTHANOREQUALS reduce using rule 21 (function -> ID OPENPAR STRING ID moreArg CLOSEPAR .)
    NOTEQUALS       reduce using rule 21 (function -> ID OPENPAR STRING ID moreArg CLOSEPAR .)
    CLOSEPAR        reduce using rule 21 (function -> ID OPENPAR STRING ID moreArg CLOSEPAR .)
    COMMA           reduce using rule 21 (function -> ID OPENPAR STRING ID moreArg CLOSEPAR .)
    OPENBRACK       reduce using rule 21 (function -> ID OPENPAR STRING ID moreArg CLOSEPAR .)


state 131

    (23) function -> ID OPENPAR BOOL ID moreArg CLOSEPAR .

    SEMICOL         reduce using rule 23 (function -> ID OPENPAR BOOL ID moreArg CLOSEPAR .)
    MULTIPLY        reduce using rule 23 (function -> ID OPENPAR BOOL ID moreArg CLOSEPAR .)
    DIVIDE          reduce using rule 23 (function -> ID OPENPAR BOOL ID moreArg CLOSEPAR .)
    AND             reduce using rule 23 (function -> ID OPENPAR BOOL ID moreArg CLOSEPAR .)
    OR              reduce using rule 23 (function -> ID OPENPAR BOOL ID moreArg CLOSEPAR .)
    PLUS            reduce using rule 23 (function -> ID OPENPAR BOOL ID moreArg CLOSEPAR .)
    MINUS           reduce using rule 23 (function -> ID OPENPAR BOOL ID moreArg CLOSEPAR .)
    COMPEQUALS      reduce using rule 23 (function -> ID OPENPAR BOOL ID moreArg CLOSEPAR .)
    LESSTHAN        reduce using rule 23 (function -> ID OPENPAR BOOL ID moreArg CLOSEPAR .)
    GREATERTHAN     reduce using rule 23 (function -> ID OPENPAR BOOL ID moreArg CLOSEPAR .)
    GREATERTHANOREQUALS reduce using rule 23 (function -> ID OPENPAR BOOL ID moreArg CLOSEPAR .)
    LESSTHANOREQUALS reduce using rule 23 (function -> ID OPENPAR BOOL ID moreArg CLOSEPAR .)
    NOTEQUALS       reduce using rule 23 (function -> ID OPENPAR BOOL ID moreArg CLOSEPAR .)
    CLOSEPAR        reduce using rule 23 (function -> ID OPENPAR BOOL ID moreArg CLOSEPAR .)
    COMMA           reduce using rule 23 (function -> ID OPENPAR BOOL ID moreArg CLOSEPAR .)
    OPENBRACK       reduce using rule 23 (function -> ID OPENPAR BOOL ID moreArg CLOSEPAR .)


state 132

    (28) moreArg -> COMMA relexpr moreArg .

    CLOSEPAR        reduce using rule 28 (moreArg -> COMMA relexpr moreArg .)


state 133

    (29) moreArg -> COMMA INT ID .
    (30) moreArg -> COMMA INT ID . moreArg
    (27) moreArg -> . COMMA relexpr
    (28) moreArg -> . COMMA relexpr moreArg
    (29) moreArg -> . COMMA INT ID
    (30) moreArg -> . COMMA INT ID moreArg
    (31) moreArg -> . COMMA STRING ID
    (32) moreArg -> . COMMA STRING ID moreArg
    (33) moreArg -> . COMMA BOOL ID
    (34) moreArg -> . COMMA BOOL ID moreArg

    CLOSEPAR        reduce using rule 29 (moreArg -> COMMA INT ID .)
    COMMA           shift and go to state 112

    moreArg                        shift and go to state 138

state 134

    (31) moreArg -> COMMA STRING ID .
    (32) moreArg -> COMMA STRING ID . moreArg
    (27) moreArg -> . COMMA relexpr
    (28) moreArg -> . COMMA relexpr moreArg
    (29) moreArg -> . COMMA INT ID
    (30) moreArg -> . COMMA INT ID moreArg
    (31) moreArg -> . COMMA STRING ID
    (32) moreArg -> . COMMA STRING ID moreArg
    (33) moreArg -> . COMMA BOOL ID
    (34) moreArg -> . COMMA BOOL ID moreArg

    CLOSEPAR        reduce using rule 31 (moreArg -> COMMA STRING ID .)
    COMMA           shift and go to state 112

    moreArg                        shift and go to state 139

state 135

    (33) moreArg -> COMMA BOOL ID .
    (34) moreArg -> COMMA BOOL ID . moreArg
    (27) moreArg -> . COMMA relexpr
    (28) moreArg -> . COMMA relexpr moreArg
    (29) moreArg -> . COMMA INT ID
    (30) moreArg -> . COMMA INT ID moreArg
    (31) moreArg -> . COMMA STRING ID
    (32) moreArg -> . COMMA STRING ID moreArg
    (33) moreArg -> . COMMA BOOL ID
    (34) moreArg -> . COMMA BOOL ID moreArg

    CLOSEPAR        reduce using rule 33 (moreArg -> COMMA BOOL ID .)
    COMMA           shift and go to state 112

    moreArg                        shift and go to state 140

state 136

    (38) while -> LOOP WHILE OPENPAR relexpr CLOSEPAR block .

    RETURN          reduce using rule 38 (while -> LOOP WHILE OPENPAR relexpr CLOSEPAR block .)
    INT             reduce using rule 38 (while -> LOOP WHILE OPENPAR relexpr CLOSEPAR block .)
    STRING          reduce using rule 38 (while -> LOOP WHILE OPENPAR relexpr CLOSEPAR block .)
    BOOL            reduce using rule 38 (while -> LOOP WHILE OPENPAR relexpr CLOSEPAR block .)
    VOID            reduce using rule 38 (while -> LOOP WHILE OPENPAR relexpr CLOSEPAR block .)
    ID              reduce using rule 38 (while -> LOOP WHILE OPENPAR relexpr CLOSEPAR block .)
    PRINT           reduce using rule 38 (while -> LOOP WHILE OPENPAR relexpr CLOSEPAR block .)
    OPENBRACK       reduce using rule 38 (while -> LOOP WHILE OPENPAR relexpr CLOSEPAR block .)
    LOOP            reduce using rule 38 (while -> LOOP WHILE OPENPAR relexpr CLOSEPAR block .)
    IF              reduce using rule 38 (while -> LOOP WHILE OPENPAR relexpr CLOSEPAR block .)
    SEMICOL         reduce using rule 38 (while -> LOOP WHILE OPENPAR relexpr CLOSEPAR block .)
    $end            reduce using rule 38 (while -> LOOP WHILE OPENPAR relexpr CLOSEPAR block .)
    CLOSEBRACK      reduce using rule 38 (while -> LOOP WHILE OPENPAR relexpr CLOSEPAR block .)


state 137

    (40) if -> IF OPENPAR relexpr CLOSEPAR block ELSE . block
    (4) block -> . OPENBRACK command CLOSEBRACK
    (5) block -> . OPENBRACK CLOSEBRACK

    OPENBRACK       shift and go to state 18

    block                          shift and go to state 141

state 138

    (30) moreArg -> COMMA INT ID moreArg .

    CLOSEPAR        reduce using rule 30 (moreArg -> COMMA INT ID moreArg .)


state 139

    (32) moreArg -> COMMA STRING ID moreArg .

    CLOSEPAR        reduce using rule 32 (moreArg -> COMMA STRING ID moreArg .)


state 140

    (34) moreArg -> COMMA BOOL ID moreArg .

    CLOSEPAR        reduce using rule 34 (moreArg -> COMMA BOOL ID moreArg .)


state 141

    (40) if -> IF OPENPAR relexpr CLOSEPAR block ELSE block .

    RETURN          reduce using rule 40 (if -> IF OPENPAR relexpr CLOSEPAR block ELSE block .)
    INT             reduce using rule 40 (if -> IF OPENPAR relexpr CLOSEPAR block ELSE block .)
    STRING          reduce using rule 40 (if -> IF OPENPAR relexpr CLOSEPAR block ELSE block .)
    BOOL            reduce using rule 40 (if -> IF OPENPAR relexpr CLOSEPAR block ELSE block .)
    VOID            reduce using rule 40 (if -> IF OPENPAR relexpr CLOSEPAR block ELSE block .)
    ID              reduce using rule 40 (if -> IF OPENPAR relexpr CLOSEPAR block ELSE block .)
    PRINT           reduce using rule 40 (if -> IF OPENPAR relexpr CLOSEPAR block ELSE block .)
    OPENBRACK       reduce using rule 40 (if -> IF OPENPAR relexpr CLOSEPAR block ELSE block .)
    LOOP            reduce using rule 40 (if -> IF OPENPAR relexpr CLOSEPAR block ELSE block .)
    IF              reduce using rule 40 (if -> IF OPENPAR relexpr CLOSEPAR block ELSE block .)
    SEMICOL         reduce using rule 40 (if -> IF OPENPAR relexpr CLOSEPAR block ELSE block .)
    $end            reduce using rule 40 (if -> IF OPENPAR relexpr CLOSEPAR block ELSE block .)
    CLOSEBRACK      reduce using rule 40 (if -> IF OPENPAR relexpr CLOSEPAR block ELSE block .)

